load(
    "@io_bazel_rules_docker//container:providers.bzl",
    _ImageInfo = "ImageInfo",
    _ImportInfo = "ImportInfo",
    _BundleInfo = "BundleInfo",
)


def _syft_sbom_impl(ctx):
    output_file = ctx.actions.declare_file(ctx.label.name + "-sbom.json")
    args = [
        "docker-archive:" + ctx.file.image.path,
        "--scope", ctx.attr.scope,
        "--output", "json",
        "--file", output_file.path,
    ]

    if ctx.file.config:
        args += ["--config", ctx.file.config.path]

    ctx.actions.run(
        inputs = [ctx.file.image],
        outputs = [output_file],
        executable = ctx.executable._syft,
        mnemonic = "SyftScan",
        progress_message = "Generating SBOM",
        arguments = args,
    )

    return [DefaultInfo(files = depset([output_file]))]

syft_sbom = rule(
    attrs = {
        "image": attr.label(
            allow_single_file = [".tar"],
            mandatory = True,
        ),
        "scope": attr.string(
            default = "Squashed",
        ),
        "config": attr.label(
            mandatory = False,
            allow_single_file = True,
        ),
        "_syft": attr.label(
            default = Label("@com_github_anchore_syft//:syft"),
            executable = True,
            cfg = "exec",
        ),
    },
    implementation = _syft_sbom_impl,
)

def _runfiles_path(ctx, f):
    path = ctx.workspace_name + "/" + f.short_path
    return path

_grype_test_script_content_linux = """#!/usr/bin/env sh
$RUNFILES_DIR/{grype} {imgtype}:$RUNFILES_DIR/{image} --scope {scope} --fail-on {severity}
"""

_grype_test_script_content_windows = """@rem Generated by anchore.bzl, do not edit.
@echo off
$RUNFILES_DIR/{grype} {imgtype}:$RUNFILES_DIR/{image} --scope {scope} --fail-on {severity}
"""

def _grype_test_impl(ctx):
    if ctx.file.image and ctx.file.image.short_path:
        imgtype = "docker-archive"
        imgpath = _runfiles_path(ctx, ctx.file.image)
    elif ctx.file.sbom and ctx.file.sbom.short_path:
        imgtype = "sbom"
        imgpath = _runfiles_path(ctx, ctx.file.sbom)
    else:
        fail("Exactly one of sbom and image MUST be provided for grype_test rules.")

    if ctx.attr.is_windows:
        test_executable = ctx.actions.declare_file(ctx.label.name + "-test.bat")
        ctx.actions.write(
            output = test_executable,
            is_executable = True,
            content = _grype_test_script_content_windows.format(
                imgtype = imgtype,
                image = imgpath,
                grype = _runfiles_path(ctx, ctx.executable._grype),
                severity = ctx.attr.fail_on_severity,
                scope = ctx.attr.scope
            ),
        )
    else:
        test_executable = ctx.actions.declare_file(ctx.label.name + "-test.sh")
        ctx.actions.write(
            output = test_executable,
            is_executable = True,
            content = _grype_test_script_content_linux.format(
                imgtype = imgtype,
                image = imgpath,
                grype = _runfiles_path(ctx, ctx.executable._grype),
                severity = ctx.attr.fail_on_severity,
                scope = ctx.attr.scope
            ),
        )

    return [
        DefaultInfo(
            executable = test_executable,
            files = depset(direct = [test_executable]),
            runfiles = ctx.runfiles(files = [ctx.executable._grype, ctx.file.image or ctx.file.sbom]),
        )
    ]

_grype_test = rule(
    attrs = {
        "image": attr.label(
            doc = "A TAR export of the image to be scanned compatible with `docker save`. Overrides `sbom`.",
            allow_single_file = [".tar"],
            mandatory = False,
        ),
        "sbom": attr.label(
            doc = "A JSON-fomatted SBOM compatible with the output of Anchore Syft.",
            allow_single_file = True,
            mandatory = False,
        ),
        "fail_on_severity": attr.string(
            doc = "The test will fail if a CVE of this severity is found. " +
	        "Defaults to \"low\" for safety so that users do not ignore " +
                "CVEs by default, but most users will want to choose a higher " +
                "threshold, or define multiple rules at different thresholds. " +
		"Allowed values are: negligible, low, medium, high, critical.",
            default = "low",
	    values = [
                "negligible",
                "low",
                "medium",
                "high",
                "critical",
            ],
        ),
        "scope": attr.string(
            doc = "Scope of the scan, when an image is provided. See Anchore Grype documentation.",
            default = "Squashed",
	    values = [
                "Squashed",
                "All",
            ],
        ),
        "config": attr.label(
            doc = "Not yet implemented.",
            mandatory = False,
            allow_single_file = True,
        ),
        "_grype": attr.label(
            default = Label("@com_github_anchore_grype//:grype"),
            executable = True,
            cfg = "target",
        ),
        "is_windows": attr.bool(mandatory = True),
    },
    test = True,
    implementation = _grype_test_impl,
)

def grype_test(name, fail_on_severity="low", scope="Squashed", **kwargs):
    """Scan a docker image for CVEs.

    Uses Anchore Grype to scan a docker image or Anchore Syft SBOM for
    known vulnerabilities, and fails if vulnerabilities exceeding a
    severity threshold are found.

    The user is required to provide 'name' as well as exactly one of
    'image' or 'sbom'. All other fields have sane defaults.

    Args:
        name: the name of the label to be created.
        image: the complete docker image TAR, compatible with `docker save`.
	sbom: the Anchore Syft SBOM of the image, formatted as JSON. See
            `syft_sbom` rule above.
        fail_on_severity: the test built by this target shall fail if any
            CVE is found at this severity or higher. Defaults to "low",
            which may produce results that users consider to be false
            positives.
        scope: if "Squashed", only scan the effective file system of
            the final image. If "All", scan every file in each layer,
            including those that are overwritten or deleted in the final
            image.
    """
    _grype_test(
        name = name,
        fail_on_severity = fail_on_severity,
        scope = scope,
        is_windows = select({
            "@bazel_tools//src/conditions:host_windows": True,
            "//conditions:default": False,
        }),
        **kwargs,
    )
